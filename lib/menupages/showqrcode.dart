import 'dart:async';
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:date_format/date_format.dart';
import 'package:flutter/material.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:rl_001/class/buttonpref.dart';
import 'package:rl_001/class/errors.dart';
import 'package:rl_001/class/stylepref.dart';
import 'package:rl_001/class/textstylepref.dart';
import 'package:rl_001/widgets/global_appbar.dart';
import 'package:random_string/random_string.dart';
import 'package:rl_001/globals.dart' as globals;
import 'package:rl_001/widgets/widget_custom.dart';

import '../class/recmon.dart';

class ShowQRCode extends StatefulWidget {
  ShowQRCode(this._level, {Key? key}) : super(key: key);

  String _level;

  @override
  _ShowQRCodeState createState() => _ShowQRCodeState();
}

class _ShowQRCodeState extends State<ShowQRCode> {
  //
  String _code = "nocode"; // Stores the NEW QR code that's generated each time

  bool _isCodeVisible = false;
  // Set initially to true to avoid no code being shown due to a delay in confirming
  // internet connection status
  bool _isConnected = true;

  bool _staying = true;

  @override
  void initState() {
    //
    super.initState();

    RecMon().registerAction("QRScan");

    // Place generate code first so a code is generated first!!!!
    _generateCode();
    // Then check if we are online
    _checkIfOnline();
  }

  @override
  void didUpdateWidget(ShowQRCode oldWidget) {
    super.didUpdateWidget(oldWidget);
    _generateCode();
  }

  @override
  void dispose() {
    super.dispose();
    _leavePage();
  }

  @override
  Widget build(BuildContext context) {
    //
    final _fsi = FirebaseFirestore.instance;

    return Container(
      decoration: GlobalStylePref().mainBackgroundStyle,
      child: WillPopScope(
        //
        // To prevent showing the "leave page?" dialog when there is no QR code visible,
        // we check if flag _isCodeVisible is true before spawning the dialog.
        // If it's not true, we return "true" in else{}, which apparently tells Flutter to
        // allow user to leave page. Returning "false" in else{} stops the user from leaving,
        // and still doesn't display any dialog.
        //
        // _isCodeVisisble is set true/false inside of StreamBuilder according to the state
        // of the code inside the database.
        //
        onWillPop: () async {
          if (_isCodeVisible) {
            return await leaveDialog(context);
          } else {
            return true;
          }
        },
        child: Scaffold(
          backgroundColor: Colors.transparent,
          appBar: GlobalAppBar().appBar("Activate ${widget._level}", context),

          //drawer: SideMenu(),
          //
          // This is where the magic happens. Where the QR code appears,
          // then disappears when a recipient has scanned the code.
          //
          // First, we aim for the document space inside of the code_bank collection,
          // and we access the document that has the same name as the code we generated
          // This is the key to the whole "hack".
          // The document inside "code_bank" collection has the same name as the code
          // generated by _generateCode.
          // This allows us to aim for that code only.
          //
          // then we create a var, _qr, to store the fields in that document, which also
          // contain the same code as a "value".
          //
          // Next comes the hacks. We check if snapshot has data, and ONLY THEN put that
          // data into _qr variable. Otherwise we get "null used on null" errors, because
          // we rely on _qr being null when the code has been deleted on the other end,
          // to delete the code from the screen and display the "generate new code" button.
          //
          // If _qr not null, then we show the QR code. If _qr is null, we show gen. button.
          //
          // Everything else is just to avoid errors.
          //
          // NOTE: Below, we do NOT use the QR code from _generateCode
          // INSTEAD, we use the code from the database
          // So this ensures the code is in the database, before it's displayed as a QR on screen.
          //
          body: StreamBuilder(
            stream: _fsi.collection("/code_bank/").doc(_code).snapshots(),
            builder: (BuildContext context,
                AsyncSnapshot<DocumentSnapshot> snapshot) {
              //
              Map<String, dynamic> _qr = {};

              if (snapshot.hasData && snapshot.data!.exists) {
                print("hasdata");

                _qr = snapshot.data!.data()
                    as Map<String, dynamic>; // get the QR code from Firestore

                if (_isConnected) {
                  // Connected
                  if (_qr != null) {
                    _isCodeVisible = true;

                    return Center(
                      child: QrImage(
                        data: _qr["code"].toString(),
                        backgroundColor: Colors.white,
                        size: 350,
                      ),
                    );
                  } else {
                    // Other party has scanned the QR code
                    _isCodeVisible = false;
                    // return Column(
                    //   mainAxisAlignment: MainAxisAlignment.center,
                    //   children: [
                    //     // Generate new QR code
                    //     // onPress in midButton has setState, and calls _generateCode, which
                    //     // begins the code generation loop again, and the path gets rebuilt,
                    //     // and the code is displayed
                    //     Center(
                    //       child: GlobalButtonPref().midButton(
                    //         "Generate ${widget._level} Code",
                    //         () {
                    //           setState(() {
                    //             _generateCode();
                    //             _checkIfOnline();
                    //           });
                    //         },
                    //       ),
                    //     ),
                    //     const SizedBox(
                    //       height: 20,
                    //     ),
                    //     Center(
                    //       child: GlobalButtonPref().midButton(
                    //         "Exit",
                    //         () {
                    //           _leavePage();
                    //           Navigator.pop(context);
                    //         },
                    //       ),
                    //     ),
                    //     const SizedBox(
                    //       height: 20,
                    //     ),
                    //   ],
                    // );
                  }
                } else {
                  // Not connected
                  _isCodeVisible = false;
                  // //_pushBack();
                  // return Column(
                  //   mainAxisAlignment: MainAxisAlignment.center,
                  //   children: [
                  //     // Generate new QR code
                  //     // onPress in midButton has setState, and calls _generateCode, which
                  //     // begins the code generation loop again, and the path gets rebuilt,
                  //     // and the code is displayed
                  //     Center(
                  //       child: GlobalButtonPref().midButton(
                  //         "Generate ${widget._level} Code",
                  //         () {
                  //           setState(() {
                  //             _generateCode();
                  //             _checkIfOnline();
                  //           });
                  //         },
                  //       ),
                  //     ),
                  //     const SizedBox(
                  //       height: 20,
                  //     ),
                  //     Center(
                  //       child: GlobalButtonPref().midButton(
                  //         "Exit",
                  //         () {
                  //           _leavePage();
                  //           Navigator.pop(context);
                  //         },
                  //       ),
                  //     ),
                  //     const SizedBox(
                  //       height: 20,
                  //     ),
                  //   ],
                  // );
                }
                // Main if - else that decides what's on the screen

              } else /*(!snapshot.hasData)*/ {
                print("snapshot does not have data - trigger else");
                //_pushBack();
                return _staying
                    ? Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          // Generate new QR code
                          // onPress in midButton has setState, and calls _generateCode, which
                          // begins the code generation loop again, and the path gets rebuilt,
                          // and the code is displayed
                          Center(
                            child: GlobalButtonPref().midButton(
                              "Generate ${widget._level} Code",
                              () {
                                setState(() {
                                  _generateCode();
                                  _checkIfOnline();
                                });
                              },
                            ),
                          ),
                          const SizedBox(
                            height: 20,
                          ),
                          Center(
                            child: GlobalButtonPref().midButton(
                              "Exit",
                              () {
                                _leavePage();
                              },
                            ),
                          ),
                          const SizedBox(
                            height: 20,
                          ),
                        ],
                      )
                    : Container();
              }
              // if (snapshot.hasError) {
              //   print("haserror");
              //   //_pushBack();
              //   return Container(
              //     child: Center(
              //       child: GlobalErrorMessages().futureBuilderConnectionError(),
              //     ),
              //   );
              // }
              return Center(
                child: WidgetCustom().circularProgress1(),
              );
            },
          ),
        ),
      ),
    );
  }

  void _pushBack() {
    Timer(Duration(seconds: 3), () {
      Navigator.pop(context);
    });
  }

  Future _generateCode() async {
    //
    // Get current date
    String _now =
        formatDate(DateTime.now(), ["dd", "mm", "yy", "#", "HH", "nn", "ss"]);

    // Gen code for driver, etc below

    _code = randomAlphaNumeric(17);

    try {
      await FirebaseFirestore.instance
          .collection("/code_bank/")
          .doc(_code)
          .set({
        "code": _code,
        "level": widget._level,
        "depot": globals.depotName,
        "time": DateTime.now().toString(),
        "donor": globals.key,
        "donlev": globals.level,
      }).whenComplete(() => FirebaseFirestore.instance.clearPersistence());
    } catch (e) {
      //
    }
  }

  Future<bool> leaveDialog(BuildContext context) async {
    //
    return (await showDialog(
          context: context,
          builder: (context) => AlertDialog(
            title: Text(
              "Cancel Activating ${widget._level}?",
              textAlign: TextAlign.center,
            ),
            actionsAlignment: MainAxisAlignment.center,
            //contentPadding: EdgeInsets.all(20.0),
            actions: [
              TextButton(
                onPressed: () {
                  Navigator.pop(context);
                },
                child: Text(
                  "No",
                  style: TextStyle(
                    fontSize: 20,
                  ),
                ),
              ),
              SizedBox(
                width: 20,
              ),
              TextButton(
                onPressed: () async {
                  //
                  // If user chooses to leave, then delete the code in Firestore before they go
                  _leavePage();

                  _staying = false;

                  Navigator.of(context).pop();
                },
                child: Text(
                  "Yes",
                  style: TextStyle(
                    fontSize: 20,
                  ),
                ),
              ),
            ],
          ),
        ) ??
        false);
  }

  Future _leavePage() async {
    //
    try {
      //
      await FirebaseFirestore.instance
          .collection("/code_bank/")
          .doc(_code)
          .delete();

      Navigator.pop(context);
      //
    } catch (e) {
      //
      print("_leavePage method exception triggered ${e.toString()}");
      return;
    }
  }

  //
  // Checks if device is online by looking up google.com.
  // If an exception occurrs, then the device is deemed offline, and we
  // set _isConnected to false.
  // _isConnected is used in StreamBuilder to decide if to show a QR code
  // generator, or a message saying "No Internet Connection"
  //
  Future _checkIfOnline() async {
    //
    try {
      final _result = await InternetAddress.lookup("example.com");

      if (_result.isNotEmpty && _result[0].rawAddress.isNotEmpty) {
        print("isconnected true");
        _isConnected = true;
      }
    } on SocketException catch (e) {
      _notConnectedDialog();
      print("isconnected false");
      _isConnected = false;

      // In case user reconnects, this deletes the last code (the only code if
      // they didn't go back and forward to this page again).
      // This is to try and prevent orphaned codes in the code_bank
      await FirebaseFirestore.instance
          .collection("/code_bank/")
          .doc(_code)
          .delete();
    }
  }

  void _notConnectedDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: Text(
            "You are not connected to the Internet.",
            textAlign: TextAlign.center,
          ),
          //content: Text("You must be connected to activate a driver."),
          actions: [
            Center(
              child: TextButton(
                onPressed: () {
                  Navigator.pop(context);
                  Navigator.pop(context);
                },
                child: Text("Return"),
              ),
            ),
          ],
        );
      },
    );
  }
}
